---
page_title: "edgecast_cps_certificate Resource"
subcategory: "Certificate Provisioning System (CPS)"
description: |-
  edgecast_cps_certificate Resource
---

# edgecast_cps_certificate Resource

Use the `edgecast_cps_certificate` resource to:
* Request a TLS certificate.
* Update a TLS certificate. The settings that can be modified vary by certificate status. 
  * **Pending:** If the TLS certificate has not yet been issued by the Certificate Authority (CA), then you may update basic settings (e.g., name, description, and automatic renewal).
  * **Issued:** Once a TLS certificate has been issued by the CA, then you are also allowed to update the organization or the domains associated with the certificate request. Updating a certificate request's domain or organization will result in a new request being submitted to the CA.
* Delete a TLS certificate. This occurs when the resource corresponding to an issued TLS certificate is removed.
* Cancel a TLS certificate request. This occurs when the resource corresponding to a request for a TLS certificate that has not been issued is removed.

-> A CA is responsible for validating your request and then issuing a TLS certificate. This automated workflow will cause your state file to contain stale information, such as the TLS certificate request status, order status, and deployment status. It may also be missing data, such as Domain Control Validation (DCV) tokens. We recommend that you refresh your state file using the `-refresh-only` mode before retrieving or managing a TLS certificate. 
[Learn more.](https://learn.hashicorp.com/tutorials/terraform/refresh)

Serving traffic over HTTPS requires a TLS certificate and an edge CNAME configuration.

-> You may manage an existing TLS certificate request by importing it as a resource.  
[Learn more.](#import-resource)

## Authentication

This resource requires a [REST API client](../guides/authentication#rest-api-oauth-20-client-credentials) that has been assigned the `sec.cps.certificates` scope.

!> Our Terraform implementation only supports a single scope per REST API client. If you plan on managing both `edgecast_rules_engine_policy` and `edgecast_cps_certificate` resources, then you will need to use a separate working directory for each type of resource.

## TLS Certificate Creation Error

If an error occurs during TLS certificate creation, then our service may reserve the submitted certificate label. This will prevent you from creating a TLS certificate with the same label. If this occur, address the error and then change the `certficate_label` property to a unique value.

## Example Usage

{{tffile "examples/resources/edgecast_cps_certificate/resource.tf"}}

{{ .SchemaMarkdown | trimspace }}

## Import Resource
Manage an existing TLS certificate through Terraform by importing it as a resource. Perform the following steps:
1. Insert an empty resource block within your resource configuration.

        resource "edgecast_cps_certificate" "<RESOURCE>" {
          
        }
    **Example:**

        resource "edgecast_cps_certificate" "sample_certificate" {
          
        }
1. Run the following command to attach a TLS certificate request to your resource configuration.

        terraform import edgecast_cps_certificate.<RESOURCE> <ACCOUNT_NUMBER>:<CERTIFICATE_REQUEST_ID>
    * `<RESOURCE>` - Replace this term with the name of the resource defined in step 1.
    * `<ACCOUNT_NUMBER>` - Replace this term with your customer account number. Find your account number in the upper right-hand corner of the MCC.
    * `<CERTIFICATE_REQUEST_ID>` - Replace this term with the system-defined ID assigned to the desired TLS certificate request. You may retrieve a list of TLS certificate requests and their system-defined IDs through our [REST API](https://developer.edgecast.com/cdn/api/index.html#CPS/Get-All-Certificate-Requests.htm).

    **Example:**

        terraform import edgecast_cps_certificate.sample_certificate 0001:123456
-> Upon running the above command, a resource for that TLS certificate request will be recorded in the state file.
