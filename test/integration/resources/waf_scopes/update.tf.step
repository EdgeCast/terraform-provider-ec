resource "edgecast_waf_rate_rule" "rate_rule" {
  account_number = var.account_number
  name           = "Rate Rule #2"
  duration_sec   = 1
  keys           = ["IP", "USER_AGENT"]
  disabled       = false
  num            = 10

  condition_group {
    name = "Group 1"

    condition {
      target {
        type = "REMOTE_ADDR"
      }

      op {
        is_case_insensitive = false
        is_negated          = false
        type                = "IPMATCH"                  # only use op.type=IPMATCH when target.type=REMOTE_ADDR
        values              = ["10.10.2.3", "10.10.2.4"] # values array property is required when op.type=EM or op.type=IPMATCH
      }
    }

    condition {
      target {
        type = "REQUEST_METHOD"
      }

      op {
        is_case_insensitive = true
        is_negated          = true
        type                = "EM"
        values              = ["GET", "POST"] # values array property is required when op.type=EM or op.type=IPMATCH
      }
    }

    condition {
      target {
        type = "FILE_EXT"
      }

      op {
        is_case_insensitive = true
        is_negated          = false
        type                = "RX"
        value               = "(.*?)\\.(jpg|gif|doc|pdf)$" # value property is required when op.type=RX
      }
    }
  }

  condition_group {
    name = "Group 2"

    condition {
      target {
        type  = "REQUEST_HEADERS"
        value = "User-Agent" # only valid when type=REQUEST_HEADERS.
      }

      op {
        is_case_insensitive = true
        is_negated          = false
        type                = "EM"
        values              = ["Mozilla/5.0", "Chrome/91.0.4472.114"] # values array property is required when op.type=EM or op.type=IPMATCH
      }

    }
    condition {
      target {
        type = "REQUEST_URI"
      }

      op {
        is_case_insensitive = true
        is_negated          = false
        type                = "EM"
        values              = ["/marketing", "/800001/mycustomerorigin"] # values array property is required when op.type=EM or op.type=IPMATCH
      }

    }
  }
}

resource "edgecast_waf_access_rule" "access_rule" {
  account_number                = var.account_number
  name                          = "Access Rule #1"
  response_header_name          = "my-response-header-name"
  allowed_http_methods          = ["GET", "POST"]
  allowed_request_content_types = ["application/json", "text/html"]
  disallowed_extensions         = [".bat", ".cgi"]
  disallowed_headers            = ["reserved-header-1", "x-reserved-header"]


  #Note: ASN access controls must be integer values
  asn {
    accesslist = [12, 200, 465]
    blacklist  = [13, 201, 466]
    whitelist  = [14, 202, 467]
  }

  cookie {
    accesslist = ["MaybeTrustedCookie1", "MaybeTrustedCookie2"]
    blacklist  = ["UntrustedCookie1", "UntrustedCookie2"]
    whitelist  = ["TrustedCookie1", "TrustedCookie2"]
  }

  country {
    accesslist = ["AU", "NZ"]
    blacklist  = ["GB", "EE"]
    whitelist  = ["US", "CAN"]
  }

  ip {
    accesslist = ["10.10.10.114", "10.10.10.115"]
    blacklist  = ["10:0:1::0:3", "10:0:1::0:4"]
    whitelist  = ["10.10.10.200", "10.10.10.201"]
  }

  referer {
    accesslist = ["https://maybetrusted.com", "http://maybestrusted2.com"]
    blacklist  = ["https://untrusted.com", "https://untrusted2.com"]
    whitelist  = ["https://trusted.com", "https://trusted2.com"]
  }

  url {
    accesslist = ["/maybe-trusted", "/maybe-trusted-2"]
    blacklist  = ["/untrusted", "/untrused/.*"]
    whitelist  = ["/trusted-path", "/trusted-path/.*"]
  }

  user_agent {
    accesslist = ["Mozilla\\s.*", "Opera\\s.*"]
    blacklist  = ["curl.*", "PostmanRuntime.*"]
    whitelist  = ["internal-tool/v1", "internal-tool/v2"]
  }
}

resource "edgecast_waf_managed_rule" "managed_rule" {
  account_number  = var.account_number
  name            = "Terraform Managed Rule #1"
  ruleset_id      = "ECRS"
  ruleset_version = "2020-05-01"
  policies = [
    "r4020_tw_cpanel.conf.json",
    "r4040_tw_drupal.conf.json",
    "r4030_tw_iis.conf.json",
    "r4070_tw_joomla.conf.json",
    "r4050_tw_microsoft_sharepoint.conf.json",
    "r4060_tw_wordpress.conf.json",
    "r5040_cross_site_scripting.conf.json",
    "r2000_ec_custom_rule.conf.json",
    "r5021_http_attack.conf.json",
    "r5020_http_protocol_violation.conf.json",
    "r5043_java_attack.conf.json",
    "r5030_local_file_inclusion.conf.json",
    "r5033_php_injection.conf.json",
    "r5032_remote_code_execution.conf.json",
    "r5031_remote_file_inclusion.conf.json",
    "r5010_scanner_detection.conf.json",
    "r5042_session_fixation.conf.json",
    "r5041_sql_injection.conf.json",
    "r6000_blocking_evaluation.conf.json"
  ]

  disabled_rule {
    policy_id = "r2000_ec_custom_rule.conf.json"
    rule_id   = "431003"
  }

  general_settings {
    anomaly_threshold      = 10
    arg_length             = 8000
    arg_name_length        = 1024
    combined_file_sizes    = 6291456
    ignore_cookie          = ["ignoredCookie"]
    ignore_header          = ["ignoredHeaders"]
    ignore_query_args      = ["ignoredQuery"]
    json_parser            = true
    max_num_args           = 512
    paranoia_level         = 1
    process_request_body   = true
    response_header_name   = "X-EC-Security-Audit"
    total_arg_length       = 64000
    validate_utf8_encoding = true
    xml_parser             = true
  }

  rule_target_update {
    is_negated     = false
    is_regex       = true
    target         = "ARGS"
    target_match   = "ignoredArgumentException"
    rule_id        = "431000"
    replace_target = ""
  }

  rule_target_update {
    is_negated     = false
    is_regex       = true
    target         = "REQUEST_COOKIES"
    target_match   = "ignoredCookiesException"
    rule_id        = "431000"
    replace_target = ""
  }

  rule_target_update {
    is_negated     = false
    is_regex       = true
    target         = "REQUEST_HEADERS"
    target_match   = "ignoredHeaderException"
    rule_id        = "431000"
    replace_target = ""
  }
}

resource "edgecast_waf_custom_rule_set" "custom_rule" {
  customer_id = var.account_number
  name        = "Custom Rule 1"

  directive {
    sec_rule {
      name = "Sec Rule 1"
      action {
        id              = 66000000
        msg             = "Invalid user agents."
        transformations = ["NONE"]
      }
      operator {
        is_negated = false
        type       = "CONTAINS"
        value      = "bot"
      }
      variable {
        is_count = false
        match {
          is_negated = false
          is_regex   = false
          value      = "User-Agent"
        }
        match {
          is_negated = false
          is_regex   = false
          value      = "User-Agent"
        }
        type = "REQUEST_HEADERS"
      }
      variable {
        is_count = false
        match {
          is_negated = false
          is_regex   = false
          value      = "User-Agent"
        }
        type = "REQUEST_URI"
      }
      chained_rule {
        action {
          id              = 66000001
          msg             = "Invalid user agent - chained."
          transformations = ["NONE"]
        }
        operator {
          is_negated = false
          type       = "CONTAINS"
          value      = "bot"
        }
        variable {
          is_count = false
          match {
            is_negated = false
            is_regex   = false
            value      = "User-Agent"
          }
          match {
            is_negated = false
            is_regex   = false
            value      = "User-Agent"
          }
          type = "REQUEST_HEADERS"
        }
      }
    }
  }
}

resource "edgecast_waf_scopes" "scopes" {
  account_number = var.account_number

  scope {
    host {
      is_case_insensitive = false
      type                = "EM"
      values              = ["site1.com/path2", "site3.com"]
    }

    limit {
      id                   = edgecast_waf_rate_rule.rate_rule.id
      name                 = "limit action custom"
      duration_sec         = 60
      enf_type             = "CUSTOM_RESPONSE"
      status               = 404
      response_body_base64 = "SGVsbG8sIHdvcmxkIQo="
      response_headers = {
        "header1" = "val1"
        "header2" = "val2"
        "header3" = "val4"
      }
    }

    path {
      is_case_insensitive = false
      is_negated          = false
      type                = "GLOB"
      value               = "*"
    }

    acl_audit_action {
      enf_type = "ALERT"
    }

    acl_audit_id = edgecast_waf_access_rule.access_rule.id

    acl_prod_action {
      name     = "acl action"
      enf_type = "ALERT"
    }

    acl_prod_id = edgecast_waf_access_rule.access_rule.id

    profile_audit_action {
      enf_type = "ALERT"
    }

    profile_audit_id = edgecast_waf_managed_rule.managed_rule.id

    profile_prod_action {
      name                 = "managed rule action"
      enf_type             = "CUSTOM_RESPONSE"
      response_body_base64 = "SGVsbG8sIHdvcmxkIQo="
      response_headers = {
        "header1" = "val1"
        "header2" = "val2"
        "header3" = "val3"
      }
      status = 404
    }

    profile_prod_id = edgecast_waf_managed_rule.managed_rule.id

    rules_audit_action {
      enf_type = "ALERT"
    }

    rules_audit_id = edgecast_waf_custom_rule_set.custom_rule.id

    rules_prod_action {
      name     = "custom rule action"
      enf_type = "BLOCK_REQUEST"
    }

    rules_prod_id = edgecast_waf_custom_rule_set.custom_rule.id

  }
}

output "waf_scopes_id" {
  description = "scopes_id"
  value       = edgecast_waf_scopes.scopes.*.id
}